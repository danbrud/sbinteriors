"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Transfer_model_1 = require("./models/Transfer.model");
const Expense_model_1 = require("./models/Expense.model");
const Task_model_1 = require("./models/Task.model");
const BalanceTransfer_model_1 = require("./models/BalanceTransfer.model");
const validator_1 = __importDefault(require("validator"));
const is_empty_1 = __importDefault(require("is-empty"));
const html_pdf_1 = __importDefault(require("html-pdf"));
const handlebars_1 = __importDefault(require("handlebars"));
exports.getTotal = function (data) {
    let prop;
    if (!data[0]) {
        return 0;
    }
    else if (data[0] instanceof Transfer_model_1.Transfer) {
        prop = 'ilsAmount';
    }
    else if (data[0] instanceof Task_model_1.Task) {
        prop = 'price';
    }
    else if (data[0] instanceof Expense_model_1.Expense || data[0] instanceof BalanceTransfer_model_1.BalanceTransfer) {
        prop = 'amount';
    }
    const total = data.reduce((acc, item) => acc + item[prop], 0);
    return total;
};
exports.validateLoginInput = function (data) {
    let errors = {};
    data.username = !is_empty_1.default(data.username) ? data.username : '';
    data.password = !is_empty_1.default(data.password) ? data.password : '';
    if (validator_1.default.isEmpty(data.username)) {
        errors.username = 'Email field is required';
    }
    if (validator_1.default.isEmpty(data.password)) {
        errors.password = 'Password field is required';
    }
    return {
        errors,
        isValid: is_empty_1.default(errors)
    };
};
exports.createPDF = function (document, options) {
    return new Promise((resolve, reject) => {
        if (!document || !document.html || !document.data) {
            reject(new Error("Some, or all, options are missing."));
        }
        // Compiles a template
        const html = handlebars_1.default.compile(document.html)(document.data, {
            allowProtoMethodsByDefault: true,
            allowProtoPropertiesByDefault: true
        });
        const pdfPromise = html_pdf_1.default.create(html, options);
        // Create PDF from html template generated by handlebars
        // Output will be PDF file
        pdfPromise.toFile(document.path, (err, res) => {
            if (!err)
                resolve(res);
            else
                reject(err);
        });
    });
};
//# sourceMappingURL=utils.js.map