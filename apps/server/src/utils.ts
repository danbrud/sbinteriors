import { Transfer } from "./models/Transfer.model"
import { Expense } from "./models/Expense.model"
import { Task } from "./models/Task.model"
import { BalanceTransfer } from "./models/BalanceTransfer.model"
import validator from 'validator'
import isEmpty from 'is-empty'
import pdf from 'html-pdf'
import Handlebars from 'handlebars'

export const getTotal = function (data): number {
  let prop: string
  if (!data[0]) {
    return 0
  } else if (data[0] instanceof Transfer) {
    prop = 'ilsAmount'
  } else if (data[0] instanceof Task) {
    prop = 'price'
  } else if (data[0] instanceof Expense || data[0] instanceof BalanceTransfer) {
    prop = 'amount'
  }

  const total = data.reduce((acc: number, item) => acc + item[prop], 0)
  return total
}

export const validateLoginInput = function(data) {
  let errors: {username?: string, password?: string} = {}

  data.username = !isEmpty(data.username) ? data.username : ''
  data.password = !isEmpty(data.password) ? data.password : ''

  if (validator.isEmpty(data.username)) {
    errors.username = 'Email field is required'
  }
  if (validator.isEmpty(data.password)) {
    errors.password = 'Password field is required'
  }

  return {
    errors,
    isValid: isEmpty(errors)
  }
}

export const createPDF = function (document, options?) {
  return new Promise((resolve, reject) => {
    if (!document || !document.html || !document.data) {
      reject(new Error("Some, or all, options are missing."))
    }
    // Compiles a template
    const html = generateHtml(document.html, document.data)
    const pdfPromise = pdf.create(html, options)

    // Create PDF from html template generated by handlebars
    // Output will be PDF file
    pdfPromise.toFile(document.path, (err, res) => {
      if (!err)
        resolve(res)
      else
        reject(err)
    })
  })
}

export const generateHtml = (template: string, data) => {
  const html = Handlebars.compile(template)(data, {
    allowProtoMethodsByDefault: true,
    allowProtoPropertiesByDefault: true
  })

  return html
}